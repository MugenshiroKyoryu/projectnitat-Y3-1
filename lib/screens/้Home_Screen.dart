import 'dart:io'; //‡πÉ‡∏ä‡πâ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart'; //‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
import 'package:path_provider/path_provider.dart'; //‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
import 'package:archive/archive_io.dart'; //‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î/‡∏Ñ‡∏•‡∏≤‡∏¢‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÑ‡∏ü‡∏•‡πå (ZIP, CBZ, RAR ‡∏Ø‡∏•‡∏Ø)‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CBZ ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ ZIP ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
import 'package:pdfx/pdfx.dart'; //‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
import 'package:permission_handler/permission_handler.dart'; //‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Permission) ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå, ‡∏Å‡∏•‡πâ‡∏≠‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

import 'PdfViewScreen.dart';
import 'CbzViewScreen.dart';
import 'package:workshopfinal/models/data.dart';

//-----------------------------------‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å-----------------------------------//

class HomeScreen
    extends
        StatefulWidget {
  const HomeScreen({
    super.key,
  });

  @override
  State<
    HomeScreen
  >
  createState() =>
      _HomeScreenState();
}

class _HomeScreenState
    extends
        State<
          HomeScreen
        > {
  List<
    Series
  >
  seriesList =
      [];
  List<
    bool
  >
  selectedSeries =
      [];
  bool
  isSelectionMode =
      false;

  // üé® ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ò‡∏µ‡∏°‡πÄ‡∏Ç‡πâ‡∏°
  final Color
  _bgColor = const Color(
    0xFF1A1A1A,
  );
  final Color
  _cardColor = const Color(
    0xFF2C2C2C,
  );
  final Color
  _accentColor = const Color(
    0xFFFFA726,
  );

  //-----------------------------------‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå-----------------------------------//
  Future<
    void
  >
  requestPermissions() async {
    if (await Permission.storage.request().isGranted)
      return;
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(
      const SnackBar(
        content: Text(
          "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå",
        ),
      ),
    );
  }

  //-----------------------------------‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠ CBZ ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (Series)-----------------------------------//

  Future<
    void
  >
  pickFiles() async {
    await requestPermissions();
    FilePickerResult?
    result = await FilePicker.platform.pickFiles(
      allowMultiple: true, //‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
      type: FileType.custom, //‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏á
      allowedExtensions: [
        'pdf',
        'cbz',
      ], //‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞ CBZ
      allowCompression: false, //‡πÑ‡∏°‡πà‡∏ö‡∏µ‡∏ö‡πÑ‡∏ü‡∏•‡πå
      withData: false, //‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    );

    if (result !=
            null &&
        result.files.isNotEmpty) /*‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)*/ {
      List<
        String
      >
      allFiles = [];
      for (var file in result.files) {
        if (file.path !=
            null)
          allFiles.add(
            file.path!,
          );
      } /*‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå allFiles ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå*/

      if (allFiles.isNotEmpty) {
        String?
        playlistName = await _askPlaylistName(); /*‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _askPlaylistName()‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ ‚Äú‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‚Äù (‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∏‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠/‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô)*/
        if (playlistName !=
                null &&
            playlistName.trim().isNotEmpty) {
          setState(
            () {
              seriesList.add(
                Series(
                  title: playlistName.trim(),
                  files: allFiles,
                ),
              );
              selectedSeries.add(
                false,
              ); /*‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)‚Üí ‡πÉ‡∏ä‡πâ setState() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤ UI (‡πÄ‡∏ä‡πà‡∏ô "Series(title: 'One Piece', files: ['1.pdf', '2.pdf', ...])") selectedSeries.add(false) ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚Äú‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‚Äù ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå*/
            },
          );
        }
      }
    }
  }

  //-----------------------------------‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ Playlist (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)-----------------------------------//

  Future<
    String?
  >
  _askPlaylistName() async {
    String
    playlistName =
        "";
    return showDialog<
      String
    >(
      context: context,
      builder:
          (
            context,
          ) {
            return AlertDialog(
              backgroundColor: _cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(
                  12,
                ),
              ),
              title: const Text(
                "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Playlist",
                style: TextStyle(
                  color: Colors.white,
                ),
              ),
              content: TextField(
                style: const TextStyle(
                  color: Colors.white,
                ),
                autofocus: true,
                decoration: InputDecoration(
                  hintText: "‡∏ä‡∏∑‡πà‡∏≠ Playlist",
                  hintStyle: TextStyle(
                    color: Colors.grey[400],
                  ),
                  filled: true,
                  fillColor: Colors.black26,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(
                      10,
                    ),
                  ),
                ),
                onChanged:
                    (
                      value,
                    ) => playlistName = value,
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(
                    context,
                  ),
                  child: Text(
                    "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                    style: TextStyle(
                      color: Colors.grey[400],
                    ),
                  ),
                ),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _accentColor,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(
                        10,
                      ),
                    ),
                  ),
                  onPressed: () => Navigator.pop(
                    context,
                    playlistName,
                  ),
                  child: const Text(
                    "‡∏ï‡∏Å‡∏•‡∏á",
                    style: TextStyle(
                      color: Colors.black,
                    ),
                  ),
                ),
              ],
            );
          },
    );
  }

  Future<
    void
  >
  _editPlaylistName(
    int
    index,
  ) async {
    String
    newName =
        seriesList[index].title;
    final result =
        await showDialog<
          String
        >(
          context: context,
          builder:
              (
                context,
              ) {
                return AlertDialog(
                  backgroundColor: _cardColor,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(
                      12,
                    ),
                  ),
                  title: const Text(
                    "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Playlist",
                    style: TextStyle(
                      color: Colors.white,
                    ),
                  ),
                  content: TextField(
                    autofocus: true,
                    style: const TextStyle(
                      color: Colors.white,
                    ),
                    decoration: InputDecoration(
                      hintText: "‡∏ä‡∏∑‡πà‡∏≠ Playlist",
                      hintStyle: TextStyle(
                        color: Colors.grey,
                      ),
                      filled: true,
                      fillColor: Colors.black26,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(
                          10,
                        ),
                      ),
                    ),
                    controller: TextEditingController(
                      text: seriesList[index].title,
                    ),
                    onChanged:
                        (
                          value,
                        ) => newName = value,
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(
                        context,
                      ),
                      child: Text(
                        "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                        style: TextStyle(
                          color: Colors.grey[400],
                        ),
                      ),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: _accentColor,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(
                            10,
                          ),
                        ),
                      ),
                      onPressed: () => Navigator.pop(
                        context,
                        newName,
                      ),
                      child: const Text(
                        "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                        style: TextStyle(
                          color: Colors.black,
                        ),
                      ),
                    ),
                  ],
                );
              },
        );

    if (result !=
            null &&
        result.trim().isNotEmpty) {
      setState(
        () {
          seriesList[index].title = result.trim();
        },
      );
    }
  }

  //-----------------------------------‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (thumbnail) ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå ‚Äî ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô PDF ‡∏´‡∏£‡∏∑‡∏≠ CBZ (‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô)-----------------------------------//

  Future<
    Widget
  >
  buildThumbnail(
    String
    path, //‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å path
  ) async {
    if (path.endsWith(
      '.pdf', //‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô .pdf ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á PDF
    )) {
      final doc = await PdfDocument.openFile(
        path, //‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏à‡∏≤‡∏Å path
      );
      final page = await doc.getPage(
        1, //‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á PDF
      );
      final pageImage = await page.render(
        width: 300,
        height: 400,
      ); //‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      if (pageImage !=
          null)
        return ClipRRect(
          borderRadius: BorderRadius.circular(
            10,
          ),
          child: Image.memory(
            pageImage.bytes,
            fit: BoxFit.cover,
          ),
        );
    } else if (path.endsWith(
      '.cbz', //‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô .cbz ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô
    )) {
      final files = await _extractCbzForThumbnail(
        path,
      );
      if (files.isNotEmpty)
        return ClipRRect(
          borderRadius: BorderRadius.circular(
            10,
          ),
          child: Image.file(
            files.first,
            fit: BoxFit.cover,
          ), //‡∏ñ‡πâ‡∏≤ render ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏ô‡∏≥‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢ Image.memory() (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô bytes)
        );
    }
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[800],
        borderRadius: BorderRadius.circular(
          10,
        ),
      ),
    ); //‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà PDF ‡∏´‡∏£‡∏∑‡∏≠ CBZ (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ) ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏ó‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ layout ‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
  }

  //-----------------------------------‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå .cbz)-----------------------------------//

  Future<
    List<
      File
    >
  >
  _extractCbzForThumbnail(
    String
    cbzPath,
  ) async {
    final bytes = await File(
      cbzPath,
    ).readAsBytes(); //‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå .cbz ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (raw bytes) ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå ZIP
    final archive = ZipDecoder().decodeBytes(
      bytes,
    ); //‡πÉ‡∏ä‡πâ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à archive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ ZIP (CBZ) ‡πÅ‡∏•‡∏∞decodeBytes() ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô bytes ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Archive ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô .cbz (‡πÄ‡∏ä‡πà‡∏ô .jpg, .png, .xml ‡∏Ø‡∏•‡∏Ø
    final tempDir =
        await getTemporaryDirectory(); //‡∏î‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ (‡∏ó‡∏µ‡πà Flutter ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ)üîπ ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    final cbzName = cbzPath
        .split(
          '/',
        )
        .last
        .replaceAll(
          '.cbz',
          '',
        ); //‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏ò ‡πÄ‡∏ä‡πà‡∏ô/storage/emulated/0/Comics/Naruto.cbz ‚Üí Naruto
    final extractDir = Directory(
      '${tempDir.path}/$cbzName-thumb',
    ); //‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πà‡∏ô /cache/Naruto-thumb
    if (!await extractDir
        .exists())
      await extractDir.create(
        recursive: true,
      ); //‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏áüîπ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ recursive: true)

    List<
      File
    >
    imageFiles =
        []; //‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ (‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 1 ‡∏£‡∏π‡∏õ)
    for (final file
        in archive) /*‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô .cbz (‡∏ó‡∏µ‡πà decode ‡∏à‡∏≤‡∏Å ZIP ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)*/ {
      if (file.isFile) /*‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô archive ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå)‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà ‚Äî ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ï‡πà‡∏≠*/ {
        final filename = '${extractDir.path}/${file.name}'; /*‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ï‡∏Å ‡πÄ‡∏ä‡πà‡∏ôüìÇ /cache/Naruto-thumb/page01.jpg*/
        final outFile = File(
          filename,
        ); //‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° path ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        await outFile.create(
          recursive: true,
        ); //recursive: true ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        await outFile.writeAsBytes(
          file.content
              as List<
                int
              >,
        ); //‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô file.content) ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÉ‡∏ä‡πâ as List<int> ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå ZIP ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô bytes
        imageFiles.add(
          outFile,
        ); //‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡∏á‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå imageFiles
        break; //‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å
      }
    }
    return imageFiles; //‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û 1 ‡πÑ‡∏ü‡∏•‡πå (‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å‡πÉ‡∏ô .cbz)
  }

  @override
  Widget
  build(
    BuildContext
    context,
  ) {
    return Scaffold(
      backgroundColor: _bgColor, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      appBar: AppBar(
        backgroundColor: Colors.grey[900], // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á AppBar
        title: Text(
          isSelectionMode
              ? "${selectedSeries.where((e) => e).length} Selected" // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              : "‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", // ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
          style: const TextStyle(
            color: Colors.white, // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            fontWeight: FontWeight.bold, // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏ô‡∏≤
          ),
        ),
        actions: [
          if (isSelectionMode) // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            IconButton(
              icon: const Icon(
                Icons.edit, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              ),
              color: _accentColor, // ‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
              onPressed: () {
                final selectedIndexes =
                    <
                      int
                    >[]; // ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                for (
                  int i = 0;
                  i <
                      selectedSeries.length;
                  i++
                ) {
                  if (selectedSeries[i])
                    selectedIndexes.add(
                      i,
                    ); // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                }
                if (selectedIndexes.isNotEmpty) {
                  for (final index in selectedIndexes) {
                    _editPlaylistName(
                      index,
                    ); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Playlist ‡∏ï‡∏≤‡∏° index
                  }
                }
              },
            ),
          if (isSelectionMode) // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            IconButton(
              icon: const Icon(
                Icons.delete, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏ö
              ),
              color: Colors.redAccent, // ‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏î‡∏á
              onPressed: () {
                setState(
                  () {
                    final toRemove =
                        <
                          int
                        >[]; // ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
                    for (
                      int i = 0;
                      i <
                          selectedSeries.length;
                      i++
                    ) {
                      if (selectedSeries[i])
                        toRemove.add(
                          i,
                        ); // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    }
                    toRemove.sort(
                      (
                        a,
                        b,
                      ) => b.compareTo(
                        a,
                      ),
                    ); // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ remove ‡∏ú‡∏¥‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                    for (final index in toRemove) {
                      seriesList.removeAt(
                        index,
                      ); // ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å seriesList
                      selectedSeries.removeAt(
                        index,
                      ); // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å selectedSeries
                    }
                    isSelectionMode = false; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                  },
                );
              },
            ),
        ],
      ),

      body: seriesList.isEmpty
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô seriesList ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
          ? const Center(
              child: Text(
                "‡∏Å‡∏î + ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå
                style: TextStyle(
                  color: Colors.grey,
                  fontSize: 18,
                ),
              ),
            )
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô seriesList ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á GridView ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          : GridView.builder(
              padding: const EdgeInsets.all(
                8,
              ),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                childAspectRatio: 0.7, // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
                crossAxisSpacing: 8, // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                mainAxisSpacing: 8, // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß
              ),
              itemCount: seriesList.length, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏ô Grid
              itemBuilder:
                  (
                    context,
                    index,
                  ) {
                    final series = seriesList[index]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ series
                    final isSelected =
                        selectedSeries.length >
                            index &&
                        selectedSeries[index];
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

                    return GestureDetector(
                      onLongPress: () {
                        // ‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°
                        setState(
                          () {
                            isSelectionMode = true;
                            selectedSeries[index] = true; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ô‡∏µ‡πâ
                          },
                        );
                      },
                      onTap: () {
                        if (isSelectionMode) {
                          // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                          setState(
                            () {
                              selectedSeries[index] = !selectedSeries[index];
                            },
                          );
                        } else {
                          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î series
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder:
                                  (
                                    _,
                                  ) => SeriesDetailScreen(
                                    series: series,
                                  ),
                            ),
                          );
                        }
                      },
                      child: AnimatedContainer(
                        duration: const Duration(
                          milliseconds: 200,
                        ),
                        decoration: BoxDecoration(
                          color: _cardColor, // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
                          borderRadius: BorderRadius.circular(
                            12,
                          ), // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á
                          boxShadow: [
                            BoxShadow(
                              color: isSelected
                                  ? _accentColor.withOpacity(
                                      0.5,
                                    ) // ‡πÄ‡∏á‡∏≤‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                  : Colors.black54, // ‡πÄ‡∏á‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
                              blurRadius: isSelected
                                  ? 12
                                  : 6, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ü‡∏∏‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
                              offset: const Offset(
                                0,
                                4,
                              ), // ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏á‡∏≤
                            ),
                          ],
                        ),
                        child: Stack(
                          children: [
                            Column(
                              children: [
                                Expanded(
                                  child:
                                      FutureBuilder<
                                        Widget
                                      >(
                                        future: buildThumbnail(
                                          series.files.first,
                                        ),
                                        // ‡∏™‡∏£‡πâ‡∏≤‡∏á thumbnail ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡πÉ‡∏ô series
                                        builder:
                                            (
                                              context,
                                              snapshot,
                                            ) {
                                              if (snapshot.hasData) return snapshot.data!;
                                              // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏•‡πâ‡∏≠‡πÇ‡∏´‡∏•‡∏î
                                              return Container(
                                                decoration: BoxDecoration(
                                                  color: Colors.grey[800],
                                                  borderRadius: BorderRadius.circular(
                                                    10,
                                                  ),
                                                ),
                                                child: const Center(
                                                  child: CircularProgressIndicator(
                                                    color: Colors.orangeAccent,
                                                  ),
                                                ),
                                              );
                                            },
                                      ),
                                ),
                                const SizedBox(
                                  height: 5,
                                ),
                                Text(
                                  series.title, // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ series
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                  style: const TextStyle(
                                    color: Colors.white70,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                            if (isSelectionMode)
                              // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Checkbox ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
                              Positioned(
                                top: 4,
                                right: 4,
                                child: Checkbox(
                                  value: isSelected,
                                  activeColor: _accentColor,
                                  onChanged:
                                      (
                                        value,
                                      ) {
                                        setState(
                                          () {
                                            selectedSeries[index] = value!;
                                          },
                                        );
                                      },
                                ),
                              ),
                          ],
                        ),
                      ),
                    );
                  },
            ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: _accentColor,
        onPressed: () {
          // ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° + ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå
          showModalBottomSheet(
            backgroundColor: _cardColor,
            context: context,
            builder:
                (
                  BuildContext context,
                ) {
                  return SafeArea(
                    child: Wrap(
                      children: [
                        ListTile(
                          leading: Icon(
                            Icons.insert_drive_file,
                            color: _accentColor,
                          ),
                          title: const Text(
                            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå",
                            style: TextStyle(
                              color: Colors.white,
                            ),
                          ),
                          onTap: () {
                            Navigator.pop(
                              context,
                            ); // ‡∏õ‡∏¥‡∏î bottom sheet
                            pickFiles(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                          },
                        ),
                      ],
                    ),
                  );
                },
          );
        },
        child: const Icon(
          Icons.add,
          size: 30,
          color: Colors.black,
        ),
      ),
    );
  }
}

class SeriesDetailScreen
    extends
        StatefulWidget {
  final Series
  series; // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Series ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const SeriesDetailScreen({
    super.key,
    required this.series,
  });

  @override
  State<
    SeriesDetailScreen
  >
  createState() =>
      _SeriesDetailScreenState();
}

class _SeriesDetailScreenState
    extends
        State<
          SeriesDetailScreen
        > {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå .cbz ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  Future<
    List<
      File
    >
  >
  extractCbz(
    String
    cbzPath,
  ) async {
    final bytes = await File(
      cbzPath,
    ).readAsBytes(); // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå .cbz ‡πÄ‡∏õ‡πá‡∏ô byte
    final archive = ZipDecoder().decodeBytes(
      bytes,
    ); // ‡πÅ‡∏ï‡∏Å zip
    final tempDir =
        await getTemporaryDirectory(); // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå

    final cbzName = cbzPath
        .split(
          '/',
        )
        .last
        .replaceAll(
          '.cbz',
          '',
        );
    final extractDir = Directory(
      '${tempDir.path}/$cbzName',
    ); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
    if (!await extractDir
        .exists())
      await extractDir.create(
        recursive: true,
      );

    List<
      File
    >
    imageFiles =
        [];
    for (final file
        in archive) {
      if (file.isFile) {
        final filename = '${extractDir.path}/${file.name}';
        final outFile = File(
          filename,
        );
        await outFile.create(
          recursive: true,
        );
        await outFile.writeAsBytes(
          file.content
              as List<
                int
              >,
        ); // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        imageFiles.add(
          outFile,
        ); // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏•‡∏á list
      }
    }
    return imageFiles; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ list ‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå PDF/CBZ ‡πÄ‡∏Ç‡πâ‡∏≤ Series
  Future<
    void
  >
  addFilesToPlaylist() async {
    FilePickerResult?
    result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      type: FileType.custom,
      allowedExtensions: [
        'pdf',
        'cbz',
      ], // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PDF/CBZ
      allowCompression: false,
      withData: false,
    );

    if (result !=
        null) {
      List<
        String
      >
      newFiles = [];
      for (var file in result.files) {
        if (file.path !=
            null)
          newFiles.add(
            file.path!,
          ); // ‡πÄ‡∏Å‡πá‡∏ö path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      }
      setState(
        () {
          widget.series.files.addAll(
            newFiles,
          ); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Series
        },
      );
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á thumbnail ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠ CBZ
  Future<
    Widget
  >
  buildThumbnail(
    String
    path,
  ) async {
    if (path.endsWith(
      '.pdf',
    )) {
      final doc = await PdfDocument.openFile(
        path,
      ); // ‡πÄ‡∏õ‡∏¥‡∏î PDF
      final page = await doc.getPage(
        1,
      ); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      final pageImage = await page.render(
        width: 120,
        height: 160,
      ); // ‡∏™‡∏£‡πâ‡∏≤‡∏á image
      if (pageImage !=
          null)
        return ClipRRect(
          borderRadius: BorderRadius.circular(
            8,
          ),
          child: Image.memory(
            pageImage.bytes, // ‡πÅ‡∏™‡∏î‡∏á thumbnail ‡∏à‡∏≤‡∏Å memory
            fit: BoxFit.cover,
          ),
        );
    } else if (path.endsWith(
      '.cbz',
    )) {
      final files = await extractCbz(
        path,
      ); // ‡πÅ‡∏ï‡∏Å CBZ ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      if (files.isNotEmpty)
        return ClipRRect(
          borderRadius: BorderRadius.circular(
            8,
          ),
          child: Image.file(
            files.first, // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á CBZ ‡πÄ‡∏õ‡πá‡∏ô thumbnail
            fit: BoxFit.cover,
          ),
        );
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà PDF ‡∏´‡∏£‡∏∑‡∏≠ CBZ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á placeholder
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[800],
        borderRadius: BorderRadius.circular(
          8,
        ),
      ),
    );
  }

  @override
  Widget
  build(
    BuildContext
    context,
  ) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á UI
    final Color
    _accentColor = const Color(
      0xFFFFA726,
    ); // ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏° / ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå
    final Color
    _bgColor = const Color(
      0xFF1A1A1A,
    ); // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠

    return Scaffold(
      backgroundColor: _bgColor,
      appBar: AppBar(
        backgroundColor: Colors.grey[900], // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á AppBar
        iconTheme: const IconThemeData(
          color: Colors.orange, // üé® ‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        ),
        title: Text(
          widget.series.title, // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå‡πÉ‡∏ô AppBar
          style: const TextStyle(
            color: Colors.white,
          ),
        ),
      ),

      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      body: widget.series.files.isEmpty
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
          ? const Center(
              child: Text(
                "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå‡∏ô‡∏µ‡πâ",
                style: TextStyle(
                  color: Colors.grey,
                ),
              ),
            )
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á ListView ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
          : ListView.builder(
              itemCount: widget.series.files.length, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå
              itemBuilder:
                  (
                    context,
                    index,
                  ) {
                    final path = widget.series.files[index]; // path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
                    final fileName = path
                        .split(
                          '/',
                        )
                        .last; // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå

                    return Card(
                      color: const Color(
                        0xFF2C2C2C,
                      ), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á card
                      margin: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 5,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(
                          12,
                        ), // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á
                      ),
                      child: ListTile(
                        // ‡πÅ‡∏™‡∏î‡∏á thumbnail ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠ CBZ
                        leading:
                            FutureBuilder<
                              Widget
                            >(
                              future: buildThumbnail(
                                path,
                              ), // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á thumbnail
                              builder:
                                  (
                                    context,
                                    snapshot,
                                  ) {
                                    if (snapshot.hasData) return snapshot.data!; // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                                    return const SizedBox(
                                      width: 50,
                                      child: CircularProgressIndicator(
                                        color: Colors.orangeAccent, // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏•‡πâ‡∏≠‡πÇ‡∏´‡∏•‡∏î
                                      ),
                                    );
                                  },
                            ),
                        title: Text(
                          fileName, // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
                          style: const TextStyle(
                            color: Colors.white70,
                          ),
                        ),
                        // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
                        trailing: IconButton(
                          icon: const Icon(
                            Icons.delete,
                            color: Colors.redAccent,
                          ),
                          onPressed: () {
                            setState(
                              () {
                                widget.series.files.removeAt(
                                  index,
                                ); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å list
                              },
                            );
                          },
                        ),
                        // ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î
                        onTap: () async {
                          if (path.endsWith(
                            '.pdf',
                          )) {
                            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô PDF ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î PdfViewScreen
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder:
                                    (
                                      _,
                                    ) => PdfViewScreen(
                                      path: path,
                                      playlist: widget.series.files,
                                    ),
                              ),
                            );
                          } else if (path.endsWith(
                            '.cbz',
                          )) {
                            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô CBZ ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î CbzViewScreen
                            final images = await extractCbz(
                              path,
                            );
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder:
                                    (
                                      _,
                                    ) => CbzViewScreen(
                                      series: widget.series,
                                      currentIndex: index,
                                      images: images,
                                    ),
                              ),
                            );
                          }
                        },
                      ),
                    );
                  },
            ),

      // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢ + ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ Series
      floatingActionButton: FloatingActionButton(
        onPressed: addFilesToPlaylist, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå
        backgroundColor: _accentColor,
        child: const Icon(
          Icons.add,
          color: Colors.black,
        ),
      ),
    );
  }
}
